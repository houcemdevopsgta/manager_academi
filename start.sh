#!/bin/bash

# Script de d√©marrage automatique - Campus Manager
# Ce script configure et d√©marre automatiquement l'application

set -e

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë   Campus Manager - Auto Start          ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# Fonction pour afficher avec style
info() {
    echo -e "${BLUE}‚Ñπ${NC} $1"
}

success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

error() {
    echo -e "${RED}‚úó${NC} $1"
}

# V√©rifier si Docker est install√©
if ! command -v docker &> /dev/null; then
    error "Docker n'est pas install√©"
    echo "Installez Docker depuis : https://docs.docker.com/get-docker/"
    exit 1
fi

# V√©rifier si Docker Compose est install√©
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    error "Docker Compose n'est pas install√©"
    echo "Installez Docker Compose depuis : https://docs.docker.com/compose/install/"
    exit 1
fi

success "Docker et Docker Compose sont install√©s"

# V√©rifier les fichiers n√©cessaires
info "V√©rification des fichiers..."

if [ ! -f "docker-compose.yml" ]; then
    error "docker-compose.yml non trouv√©"
    exit 1
fi

if [ ! -f "Dockerfile.backend" ]; then
    error "Dockerfile.backend non trouv√©"
    exit 1
fi

if [ ! -f "Dockerfile.frontend" ]; then
    error "Dockerfile.frontend non trouv√©"
    exit 1
fi

success "Tous les fichiers n√©cessaires sont pr√©sents"

# Copier nginx.conf dans frontend si n√©cessaire
if [ ! -f "frontend/nginx.conf" ] && [ -f "nginx.conf" ]; then
    info "Copie de nginx.conf dans frontend/..."
    cp nginx.conf frontend/nginx.conf
    success "nginx.conf copi√©"
fi

# V√©rifier si des conteneurs existent d√©j√†
if docker-compose ps | grep -q "campus"; then
    warning "Des conteneurs Campus Manager existent d√©j√†"
    read -p "Voulez-vous les red√©marrer ? (o/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Oo]$ ]]; then
        info "Red√©marrage des conteneurs..."
        docker-compose restart
        success "Conteneurs red√©marr√©s"
    fi
else
    # Nettoyer d'abord si n√©cessaire
    info "Nettoyage des anciens conteneurs..."
    docker-compose down 2>/dev/null || true

    # Construire les images
    info "Construction des images Docker..."
    echo "Cela peut prendre quelques minutes..."
    
    if docker-compose build --no-cache; then
        success "Images construites avec succ√®s"
    else
        error "Erreur lors de la construction"
        exit 1
    fi

    # D√©marrer les services
    info "D√©marrage des services..."
    
    if docker-compose up -d; then
        success "Services d√©marr√©s"
    else
        error "Erreur lors du d√©marrage"
        exit 1
    fi
fi

# Attendre que les services soient pr√™ts
info "Attente du d√©marrage complet..."
sleep 5

# V√©rifier l'√©tat
info "V√©rification de l'√©tat des services..."
docker-compose ps

echo ""
echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${GREEN}‚ïë   D√©marrage termin√© avec succ√®s !     ‚ïë${NC}"
echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

# Tester le backend
info "Test du backend..."
sleep 2
if curl -s http://localhost:8001/api/ | grep -q "Hello World"; then
    success "Backend fonctionnel"
else
    warning "Backend ne r√©pond pas encore (normal au premier d√©marrage)"
    info "Attendez 30 secondes et r√©essayez"
fi

echo ""
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${GREEN}üåê Application disponible :${NC}"
echo ""
echo -e "   Frontend : ${BLUE}http://localhost${NC}"
echo -e "   Backend  : ${BLUE}http://localhost:8001${NC}"
echo -e "   MongoDB  : ${BLUE}localhost:27017${NC}"
echo ""
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo ""

# Afficher les commandes utiles
echo -e "${YELLOW}üìã Commandes utiles :${NC}"
echo ""
echo "   Voir les logs          : docker-compose logs -f"
echo "   Arr√™ter               : docker-compose down"
echo "   Red√©marrer            : docker-compose restart"
echo "   √âtat des services     : docker-compose ps"
echo ""

# Proposer d'ouvrir le navigateur
read -p "Voulez-vous ouvrir l'application dans le navigateur ? (o/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Oo]$ ]]; then
    if command -v xdg-open &> /dev/null; then
        xdg-open http://localhost
    elif command -v open &> /dev/null; then
        open http://localhost
    else
        info "Ouvrez manuellement : http://localhost"
    fi
fi

echo ""
info "Pour voir les logs en temps r√©el : docker-compose logs -f"
echo ""
